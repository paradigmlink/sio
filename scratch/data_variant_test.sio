mod 79f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03abd::/src/area/server 100 {
    summon data DataType = summon Constructor
    summon data DataType = summon Constructor([i64], [i64])
    summon data DataType =
        | summon Constructor([i64], [i64])
        | summon Constructor([i64], [i64])
    data DataType = Sheep({name: bool, naked: bool})
    data DataType<A,B,C> = Constructor(Option<T>, Result<string, i64>)
    data A =
        | C
        | D
    data E<I> = F(I)
    data Tree<T> =
        | None
        | Leaf(T)
        | Node(Tree<T>, Tree<T>)
    data Result<M, N> =
        | Ok(M)
        | Err(N)
    data Option<T> =
        | None
        | Some(T)
    data E =
        | sketch MyArray ([|3; Option<Result<i64, string>>|], i64)
        | stable MyList([Option<Result<i64, string>>], i64)
        | summon MyTuple((Option<Result<i64, string>>, i64))
        | seeyou MyRecord({
            an_atom: [|2; i64|],
            bool: [i64],
            i64:  (i64),
            char: {i64:Option<Result<i64, string>>}
          })
    data F = MyRecord({
        an_atom: [|2; i64|],
        bool: [i64],
        i64:  (i64),
        char: {i64:Option<Result<i64, string>>}
    })
    a: A
    b: B
    e_array: E
    e_list: E
    e_tuple: E
    e_set: E
    e_record: E
    f: F<i64>
    k_1: K<i64, bool>
    k_2: K<i64, bool>
    p_1: P<i64>
    p_2: P<Option<i64>>
    name0 :: () -> Simple {
        skip
        a = A
        b = C
        e_array = MyArray([|1,2,3|])
        e_list = MyList([1,2,3])
        e_tuple = MyTuple((1,2))
        e_tuple = (ident)
        e_record = MyRecord({
            an_atom:[|1,2|],
            true:[1],
            "hi":1,
            'A':[1]
        })
        e_sheep = Sheep({name: self.name, naked: true})
        f = J(3)
        k_1 = N(3)
        k_2 = O(true)
        p_1 = R
        p_2 = S(3)
    }
}
