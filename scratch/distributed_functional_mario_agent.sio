url public_key : siopub00179f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03abd
url type       : "example"
url name       : "mario_functional_agent"
url app        : public_key::type::name

url live : self

module app::Types {
    pub data State =
        | Mario,
        | DeadMario,
        | SuperMario,
        | FireMario,
        | CapeMario;
    pub data Transition =
        | Goomba,
        | Feather,
        | Flower,
        | Mushroom;
}

module app::Env {
    use app::Types::{State::{self, *}, Transition::{self, *}};
    pub environment_agent :: (mario: who, transitions: [Transition]) {
        port caller live::mario_port(t: Transition) -> o: [Transition] {
            if caller == mario {
                match transitions {
                    [ h | t ] => {
                        o = h;
                        environment_agent(mario, t);
                    }
                    nil => { o = nil }
                }
            } else {
                environment_agent(mario, transitions)
            }
        }
    }
}

corporal app::Mario {
    use app::Types { State::{self, *}, Transition::{self, *}};
    change_mario :: (state: State, power: Transition) -> o: State {
        o = match (state, power) {
            | (Mario, Goomba) => DeadMario,
            | (DeadMario, _) => DeadMario,
            | (Mario, Mushroom) => SuperMario,
            | (SuperMario, Mushroom) => SuperMario,
            | (_, Goomba) => Mario,
            | (_, Flower) => FireMario,
            | (_, Feather) => CapeMario,
        }
    }
    pub mario_agent :: (env_id: who, current_state: State) {
        match env_id::mario_port<> {
            | [msg | tail] => {
                let new_state: State = change_mario(current_state, msg);
                println("transition: {}", msg);
                println("state: {}", new_state);
                mario_agent(env_id, new_state)
            }
            | nil => { }
        }
    }
}

major app::MarioSupervisor {
    use app::{
        Mario::mario_agent,
        Types::State::Mario,
    };
    pub supervisor_start :: (env_id: who) {
        let mario_id: who = spawn(self::mario);
        let mario_feed = run(vm_id, mario_id, mario_agent, [env_id, Mario]);
        match mario_feed {
            TrapExit => {},
            NormalTermination => {},
            AbnormalTermination => {},
            TemporaryOverload => {},
            //PermanentOverload => {},
            // Emergency Action Message
            EAM => {},
        }
    }
}

mod app::Main {
    use app::{
        Types::{State::{self, *}, Transition::{self, *}},
        Env::environment_agent,
        Mario::mario_agent,
        MarioSupervisor::supervisor_start,
    };
    start :: () {
        let in_transitions: [Transition] = [Mushroom, Feather, Goomba, Mushroom, Goomba, Goomba];
        //let out_transitions: [Transition];
        let states: [State];
        let env_id: who = spawn(self::env);
        let mario_supervisor_id: who = spawn(self::mario_supervisor);
        let env_feed = run(env_id, environment_agent, [mario_id, in_transitions, out_transitions]);
        let mario_supervisor_feed = run(mario_supervisor_id, supervisor_start , [env_id]);
    }
}
