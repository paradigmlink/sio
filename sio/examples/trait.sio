public_key : sio79f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03abd
name       : "trait_example"
ns         : public_key::name

trait ns::Summary {
    summon summarize :: () -> string;
}

mod ns::NewsArticle {
    stable headline :: () -> string { "BoE Inflation Continues" }
    sketch location :: () -> string { "U.K." }
    sunset author   :: () -> string { "BoJo" }
    stable content  :: () -> string { "Inflation is transitory..." }
}

impl ns::Summary for ns::NewsArticle {
    summon summarize :: () -> string {
        format("{}, by {} ({})", headline(), author(), location())
    }
}

mod ns::Tweet {
    summon username :: () -> string { "Bank of England" }
    summon content  :: () -> string { "Inflation is here to stay..." }
    summon reply    :: () -> bool { false }
    summon retweet  :: () -> bool { false }
}

impl ns::Summary for ns::Tweet {
    summon summarize :: () -> string {
        format("{}: {}", username(), content())
    }
}

mod ns::Main {
    use ns::{Summary, Tweet}
    let tweet = Tweet {};
    println!("1 new tweet: {}", tweet.summarize());
}

// Ideas below
// Clearer type bounds with where clause

some_function<T, U> :: (t: T, u: U) -> i32
where
    T: ns::Display + ns::Clone,
    U: ns::Clone + ns::Debug,
{
...
}

// Returning types that implement traits

returns_summarizable :: () -> ns::Summary {
    let tweet = ns::Tweet { }
    tweet
}

// reference this functional object and make something that works with church rosser.

public_key : sio79f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03abd
name       : "functional_object_example"
ns         : public_key::name

mod ns::Stack {
    sketch data Stack<I> = sketch Stack({ push: (I)->Stack<I>, pop: ()->(I, Stack<I>), is_empty: ()->bool})
    stack<I> :: (inner_stack: [I]) -> Stack<I> {
        push :: (item: I) -> Stack<I> {
            stack([item|stack])
        }
        pop :: () -> (I, Stack<I>) {
            match inner_stack {
                | [head|tail] => {(head, stack(tail.0))}
            }
        }
        is_empty :: () -> bool {
            inner_stack == []
        }
    } in {
        Stack({push, pop, is_empty})
    }
    sketch new_stack<I> :: () -> Stack<I> {
        stack([])
    }
}
