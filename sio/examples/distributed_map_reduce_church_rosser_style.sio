public_key : sio79f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03abd
type       : "src"
name       : "distributed_map_reduce_church_rosser_style"
app        : public_key::type::name

mod app::types {
    summon data Number   | U32(u32)
    summon data Who      | Single(who) | List([who])
}
mod app::main {
    use app {
        producer {self}
        map {self}
        reduce {self}
        display {self}
        types {Who}
    }
    summon start :: () {
        let producer_id:  who = spawn(producer, live::producer)
        let map_id:       who = spawn(map, live::map)
        let reduce_id:    who = spawn(reduce, live::reduce)
        let display_id:   who = spawn(display, live::display)
        run(producer_id,  setup_produce,  [Who::Single(map_id)]
        run(map_id,       setup_map,      [Who::Single(producer_id), Who::Single(reduce_id)])
        run(reduce_id,    setup_reduce,   [Who::Single(map_id),      Who::Single(display_id)])
        run(display_id,   display,        [Who::Single(reduce_id)])
    }
}
mod app::producer {
    use app::types { Number, Who }
    inner_produce :: (mapper: who) {
        reaction {
            | produce [mapper] -> [Number] {
                produce lazy :: (i: u32) -> [Number] {
                    wait(10)
                    Number::U32(i) | produce(i + 1)
                }
                produce(0u32)
            }
        }
    }
    summon setup_produce :: (map: Who) {
        match map {
            | Single(map) => { inner_produce(map) }
        }
    }
}
mod app::map {
    use app::types { Number, Who }
    square<T> :: (x: T) -> T { x*x }
    inner_map :: (producer: who, reducer: who) {
        reaction {
            | map [reducer] -> [Number] {
                let n : [Number] = producer::produce<>
                map lazy :: (n: [Number]) -> [Number] {
                    match n {
                        h|t => {
                            match h {
                                Number::U32(i) => {
                                    Number::U32(square(i)) | map(t)
                                }
                            }
                        }
                        [] => { [Number] }
                    }
                }
                map(n)
            }
        }
    }
    summon setup_map :: (producer: Who, reducer: Who) {
        match producer {
            | List(producer) => {
                match [reducer] {
                    | Single(reducer) => {
                        inner_map(producer, reducer)
                    }
                }
            }
        }
    }
}
mod app::reduce {
    use app::types { Number, Who }
    inner_reduce :: (displayer: who, map: who) {
        reaction {
            | reduce displayer -> [Number] {
                let n: [Number] = map::map<>
                reduce lazy :: (n: [Number], accumulator: u32) -> [Number] {
                    match n {
                        h|t => {
                            match h {
                                U32(i) => {
                                    Number::U32(h+accumulator) | reduce(t, h+accumulator)
                                }
                                [] => { [Number] }
                            }
                        }
                    }
                }
                reduce(n, 0u32)
            }
        }
    }
    summon setup_reduce :: (map: Who, displayer: Who) {
        match map {
            | Single(map) => {
                match displayer {
                    | Single(displayer) => { inner_reduce(displayer, map) }
                }
            }
        }
    }
}
mod app::display {
    inner_display lazy :: (s: [Number]) {
        match s {
            h|t => {
                println("{}", h)
                inner_display(t)
            }
        }

    }
    summon display :: ( reducer: Who ) {
        match reducer {
            Single(r) => {
                inner_display(r::reduce<[Number]>)
            }
        }
    }
}
