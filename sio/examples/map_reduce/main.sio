prod_public_key    : sio79f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03abc
producer_name      : "integer_producer"
prod               : prod_public_key::producer_name

map_public_key     : sio80f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03def
map_name           : "integer_mapper"
mapper             : map_public_key::map_name

reducer_public_key : sio81f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03cb1
reducer_name       : "integer_reducer"
reducer            : reducer_public_key::reducer_name

display_public_key : sio82f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03d32
display_name       : "integer_displayer"
displayer          : displayer_public_key::displayer_name

main_public_key    : sio84f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03d31
main_name          : "map reduce church rosser non-deterministic"
main_entry         : main_public_key::main_name

mod main_entry::main {
    use prod::producer
        mapper::map
        reducer::reduce
        displayer::display
        types {Who}
    }
    summon start :: () {
        let producer_id1: who = spawn(producer, live::producer1)
        let producer_id2: who = spawn(producer, live::producer2)
        let map_id:       who = spawn(map, live::map)
        let reduce_id:    who = spawn(reduce, live::reduce)
        let display_id:   who = spawn(display, live::display)
        run(producer_id1, setup_produce,  [Who::Single(map_id)])
        run(producer_id2, setup_produce,  [Who::Single(map_id)])
        run(map_id,       setup_map,      [Who::List([producer_id1, producer_id2]), Who::Single(reduce_id)])
        run(reduce_id,    setup_reduce,   [Who::Single(map_id),      Who::Single(display_id)])
        run(display_id,   display,        [Who::Single(reduce_id)])
    }
    summon stop :: () {
        kill(live::display)
        kill(live::reducer)
        kill(live::map)
        kill(live::producer1)
        kill(live::producer2)
    }
}
