map_public_key : sio80f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03def
map_name       : "integer_mapper"
mapper         : map_public_key::map_name

main_public_key : sio84f708c25a23ed367610facc14035adc7ba4b1bfa9252ef55c6c24f1b9b03d31
common_types    : main_public_key::"common_types"

mod mapper::map {
    use common_types { Number, Who }
    square<T> :: (x: T) -> T { x*x }
    inner_map :: (reducer: who, n: [[Number]]) {
        portcullis {
            | map [reducer] -> [Number] {
                map lazy :: (n: [[Number]]) -> [Number] {
                    // as this function is lazy, execution will pause
                    // at this point and only continue when there
                    // is a request for the output of this function.
                    let n: [[Number]] = choose(n)
                    match n {
                        chosen|not_chosen => {
                            match chosen {
                                chosen_head|chosen_tail => {
                                    match chosen_head {
                                        Number::U32(i) => {
                                            Number::U32(square(i)) | map([chosen_tail not_chosen.0])
                                        }
                                    }
                                }
                                [] => { [] }
                            }
                        }
                        [] => { [] }
                    }
                }
                map(n)
            }
        }
    }
    summon setup_map :: (producer: Who, reducer: Who) {
        match producer {
            | List(producer) => {
                match reducer {
                    | Single(reducer) => {
                        let n1 : [Number] = producer.0::produce<>
                        let n2 : [Number] = producer.1::produce<>
                        inner_map(reducer, [n1 n2])
                    }
                }
            }
        }
    }
}
