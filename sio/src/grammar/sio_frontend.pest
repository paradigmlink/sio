main = _{ SOI ~ module_def+ ~ EOI }

statement = {
    skip
    | print
    | async_send
    | reaction
    | value_creation
    | variable_creation
    | var_to_var_binding
    | conditional
    | pattern_match
    | register
    | procedure_call
    | thread
    | ffi_def
    | named_procedure_def
}
    return_value = {
        expr
        | value
    }
    print = {
        (println_lit | print_lit)
        ~ paren_open ~ string_inst ~ comma ~ print_arg ~ (comma ~ print_arg)* ~ paren_close
        | paren_open ~ string_inst ~ paren_close
    }
        println_lit = { "println" }
        print_lit = { "print" }
        print_arg = {
            procedure_call
            | ident
        }
    skip = { "skip" }
    variable_creation = { dataflow_variable }
        dataflow_variable = { "let" ~ ident_and_type ~ ("=" ~ (pattern_match | value))? }
            ident_and_type = { ident ~ ":" ~ type_decl }
    var_to_var_binding = { ident ~ "=" ~ ident }
    value_creation = { ident ~ "=" ~ (expr | value) }
        value = {
            primitive_inst
            | procedure_def
            | collection_op
            | collection_inst
            | dot_member
            | type_inst
            | paren_open ~ expr ~ paren_close
        }
            primitive_inst = {
                who_inst
                | molecule_inst
                | unit_inst
                | binary_inst
                | hexadecimal_inst
                | number_inst
                | boolean_inst
                | char_inst
                | string_inst
            }
            collection_inst = {
                record_inst
                | array_inst
                | list_inst
                | tuple_inst
            }
            dot_member = {
                procedure_call
                | ident ~ dot ~ dot_member
                | ident
            }
            number_inst = { decimal_inst | integer_inst }
                integer_inst = @{ wildcard? ~ ASCII_DIGIT+ }
                decimal_inst = @{ wildcard? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
            boolean_inst = { true_lit | false_lit }
                true_lit = { "true" }
                false_lit = { "false" }
            unit_inst = { "unit" }
            string_inst = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }
            hexadecimal_inst = @{ "0x" ~ ASCII_HEX_DIGIT ~ ( ASCII_HEX_DIGIT | wildcard)*  }
            binary_inst = @{ "0b" ~ ASCII_BIN_DIGIT ~ ( ASCII_BIN_DIGIT | wildcard)* }
            molecule_inst = { basename ~ angle_open ~ value? ~ angle_close }
            basename = @{ ident }
            char_inst = { "'" ~ ASCII_ALPHA ~ "'" }
            who_inst = { public_key ~ module_path }
                public_key = { sio_vm | ident | ASCII_ALPHANUMERIC {64} }
                    sio_vm = @{ "sio_vm" } // refers to the pubkey of process 1 aka sio_vm
                module_path = { separator ~ "/" ~ module_namespace ~ ("/" ~ module_namespace) {0, 5}  }
                module_namespace = @{ ident }
            record_inst = {
                brace_open
                    ~ ( record_pair ~ ( comma ~ record_pair )*
                        | value ~ (comma ~ value)* )?
                ~ brace_close
            }
                record_pair    = { record_key ~ ":" ~ value }
                record_key= {
                    integer_inst
                    | atom_inst
                    | boolean_inst
                    | string_inst
                    | char_inst
                }
                    atom_inst = { ident }
            array_inst  = {
                array_open
                ~ ( value ~ ( comma ~ value )* )?
                ~ array_close
            }
            list_inst   = {
                bracket_open
                ~ ( value ~ ( comma ~ value )* )?
                ~ bracket_close
            }
            tuple_inst  = {
                paren_open
                ~ ( value ~ ( comma ~ value )* )?
                ~ paren_close
            }
            type_inst = {
                primitive_data_type_decl
                | data_type_name ~ separator
                    ~ variant_constructor_name
                    ~ paren_open
                    ~ ( (expr|value) ~ ( comma ~ (expr|value) )* )
                    ~ paren_close
                | variant_constructor_name
                    ~ paren_open
                    ~ ( (expr|value) ~ ( comma ~ (expr|value) )* )
                    ~ paren_close
                | data_type_name ~ separator ~ variant_constructor_name
                | data_type_name
            }
            collection_op = {
                list_op
                //| record_op
                //| array_op
                //| tuple_op
            }
            list_op = {
                bracket_open ~ value ~ pipe ~ value ~ bracket_close
            }


    conditional = {
        "if" ~ return_value ~ brace_open
            ~ statement* ~ return_value?
        ~ brace_close ~ "else" ~ brace_open
            ~ statement* ~ return_value?
        ~ brace_close
    }
    procedure_call = {
        link_process
        | delink_process
        | monitor_process
        | demonitor_process
        | exit_process
        | register_who
        | hot_swap_spawn_process
        | cold_spawn_process
        | ident ~ dot ~ procedure_call
        | ident ~ paren_open ~ args? ~ paren_close
    }
        op_unary_minus =  { "-" }
        op_unary_not   =  { "!" }
        op_unary       = _{
            op_unary_minus
            | op_unary_not
        }
        op_plus          =  { "+" }
        op_minus         =  { "-" }
        op_times         =  { "*" }
        op_divide        =  { "/" }
        op_and           =  { "&&" }
        op_or            =  { "||" }
        op_greater       =  { ">" }
        op_greater_equal =  { ">=" }
        op_lower         =  { "<" }
        op_lower_equal   =  { "<=" }
        op_equal         =  { "==" }
        op_infix         = _{
            op_plus
            | op_minus
            | op_times
            | op_divide
            | op_and
            | op_or
            | op_greater_equal
            | op_greater
            | op_lower_equal
            | op_lower
            | op_equal
        }
        paren_open       = { "(" }
        paren_close      = { ")" }
        brace_open       = { "{" }
        brace_close      = { "}" }
        bracket_open     = { "[" }
        bracket_close    = { "]" }
        angle_open       = { "<" }
        angle_close      = { ">" }
        array_open       = { "[|" }
        array_close      = { "|]" }
        right_arrow      = { "->" }
        colon            = { ":" }
        wildcard         = { "_" }
        dot              = { "." }
        comma            = { "," }
        pipe             = { "|" }
        args  = _{ expr ~ (comma ~ expr)* }
        term = { op_unary* ~ value ~ (dot ~ procedure_call)* }
        expr = { term ~ (op_infix ~ term)* }
    pattern_match = {
        "match" ~ value
        ~ brace_open
        ~ match_body+
        ~ brace_close
    }
        match_body = {
            pipe
            ~ match_top_level
            ~ "=>" ~ brace_open
              ~ statement* ~ return_value?
            ~ brace_close

        }
            match_top_level = {
                primitive_match | collection_match | variant_match
            }
            primitive_match = {
                ident_and_type_match
                | boolean_match
                | char_match
                | string_match
                | ident
            }
            collection_match = {
                record_match
                | list_match
                | array_match
                | tuple_match
            }
            list_match = {
                bracket_open
                ~ (list_first_second_rest_match | list_first_rest_match)?
                ~ bracket_close
            }
                list_first_second_rest_match = {
                    ident
                    ~ pipe
                    ~ ident
                    ~ pipe
                    ~ ident
                }
                list_first_rest_match = {
                    ident
                    ~ pipe
                    ~ ident
                }
            record_match = {
                brace_open
                ~ ident ~ (comma ~ ident)*
                ~ brace_close
            }
            array_match = {
                array_open
                ~ (array_first_second_match | array_first_only_match )?
                ~ array_close
            }
                array_first_second_match = {
                    ident
                    ~ pipe
                    ~ ident
                }
                array_first_only_match = {
                    ident
                }
            tuple_match = {
                paren_open
                  ~ ident ~ (comma ~ ident)*
                ~ paren_close
            }

            boolean_match = {
                boolean_true_match | boolean_false_match
            }
                boolean_true_match = {
                    true_lit
                }
                boolean_false_match = {
                    false_lit
                }
            char_match = {
                char_inst | wildcard
            }
            string_match = {
                string_inst
            }
            ident_and_type_match = {
                ident_and_type
            }
            variant_match = {
                variant_constructor_match
            }
                variant_constructor_match = {
                    (product_variant_constructor_match | empty_variant_constructor_match)
                }
                product_variant_constructor_match = {
                    variant_constructor_name
                    ~ paren_open
                    ~ match_top_level ~ (comma ~ match_top_level)*
                    ~ paren_close
                }
                empty_variant_constructor_match = {
                    variant_constructor_name
                }
    register = {
        "register" ~ paren_open ~ (module_path | ident) ~ comma ~ (who_inst | ident) ~ paren_close
    }
    module_def = {
        "mod" ~ who_inst ~ price ~ brace_open
            ~ (module_declaration)*
        ~ brace_close
    }
        price = @{
            ASCII_DIGIT {1, 8}
        }
        module_declaration = {
            import_statement
            | named_procedure_def
            | ffi_def
            | module_data_type_export
            | ident_and_type
        }
            import_statement = {
                "use" ~ brace_open ~ import_from_public_key+ ~ brace_close |
                "use" ~ import_from_public_key+
            }
                import_from_public_key = {
                    public_key ~ separator ~ brace_open
                    ~ (import_namespace | type_decl | module_or_function_name)
                    ~ (comma? ~ (import_namespace | type_decl | module_or_function_name))*
                    ~ comma?
                    ~ brace_close
                }
                    import_namespace = {
                        module_namespace ~ separator ~
                        ( import_namespace
                        | brace_open
                        ~ (import_namespace | type_decl | module_or_function_name)
                        ~ (comma? ~ (import_namespace | type_decl | module_or_function_name))*
                        ~ comma?
                        ~ brace_close )
                    }
                    module_or_function_name = @{ident}
            module_data_type_export = { (stability? ~ data_type_decl) }
    async_send =  { (who_inst | ident) ~ "!" ~ (molecule_inst | ident) }
    reaction = {
        "reaction"
        ~ brace_open
        ~ reaction_body+
        ~ brace_close
    }
        reaction_body = {
            pipe ~ molecule_match ~ ( "+" ~ molecule_match)* ~ "=>" ~ brace_open ~ statement* ~ molecule_return? ~ brace_close
        }
        molecule_match = {
            ident ~ angle_open
            ~ ( reaction_who_only_match | reaction_what_only_match | reaction_what_who_match )?
            ~ angle_close
        }
        reaction_who_only_match = {
            wildcard ~ comma ~ (wildcard | ident) ~ colon ~ value
        }
        reaction_what_only_match = {
            ident ~ colon ~ type_inst ~ comma ~ wildcard
        }
        reaction_what_who_match = {
            ident ~ colon ~ type_inst ~ comma ~ ident ~ colon ~ value
        }
        molecule_return = {
            (molecule_inst | ident) ~ ("+" ~ (molecule_inst | ident))*
        }
    hot_swap_spawn_process = {
        "spawn"
        ~ paren_open
        ~ pid
        ~ comma
        ~ spawn_function
        ~ comma
        ~ spawn_argument
        ~ paren_close
    }
    cold_spawn_process = {
        "spawn"
        ~ paren_open
        ~ (ident | procedure_def)
        ~ paren_close
    }
        pid = { who_inst | ident }
        spawn_function = { ident }
        spawn_argument = { value }
    register_who = {
        "register"
        ~ paren_open
        ~ (ident | string_inst)
        ~ comma
        ~ (who_inst | ident)
        ~ paren_close
    }
    link_process = {
        "link"
        ~ paren_open
        ~ (ident | who_inst)
        ~ paren_close
    }
    delink_process = {
        "delink"
        ~ paren_open
        ~ (ident | who_inst)
        ~ paren_close
    }
    monitor_process = {
        "monitor"
        ~ paren_open
        ~ (ident | who_inst)
        ~ paren_close
    }
    demonitor_process = {
        "demonitor"
        ~ paren_open
        ~ (ident | who_inst)
        ~ paren_close
    }
    exit_process = {
        "exit"
        ~ paren_open
        ~ (ident | string_inst)
        ~ paren_close
    }
    thread = {
        "thread"
        ~ brace_open
        ~ statement+
        ~ brace_close
    }

ffi_def = { concrete_procedure ~ separator ~ who_inst ~ separator ~ ffi_args ~ right_arrow ~ primitive_return_value }
    ffi_args = { paren_open ~ primititive_procedure_parameter ~ ( comma ~ primititive_procedure_parameter )* ~ paren_close }
        primititive_procedure_parameter = {
            ident ~ ":" ~ (primitive_data_type_decl | primitive_collection_decl )
        }
        primitive_return_value = {
            (primitive_data_type_decl | primitive_collection_decl)
        }
named_procedure_def = { named_procedure_header ~ procedure_def }
    named_procedure_header = {
        stability?
        ~ procedure_name
        ~ separator
    }
    stability = @{ summon | sketch | stable | sunset | seeyou }
        summon = { "summon" }
        sketch = { "sketch" }
        stable = { "stable" }
        sunset = { "sunset" }
        seeyou = { "seeyou" }
    procedure_name = { lazy? ~ (generic_procedure | concrete_procedure) }
    generic_procedure = {
        ident
        ~ angle_open
        ~ generic_type_label ~ (comma ~ generic_type_label)*
        ~ angle_close
    }
    lazy = {
        "lazy"
    }
    concrete_procedure = {
        ident
    }
    procedure_header = {
        paren_open
        ~ procedure_parameters?
        ~ paren_close
        ~ procedure_return_type?
    }
        procedure_parameters = {
            procedure_parameter
            ~ (comma ~ procedure_parameter)*
        }
            procedure_parameter = {
                ident ~ ":" ~ higher_order_procedure_header
                | ident_and_type
            }
    higher_order_procedure_header = {
        paren_open
        ~ higher_order_procedure_parameters?
        ~ paren_close
        ~ procedure_return_type?
    }
        higher_order_procedure_parameters = {
            higher_order_procedure_parameter
            ~ (comma ~ higher_order_procedure_parameter)*
        }
            higher_order_procedure_parameter = {
                type_decl
                | ident ~ ":" ~ higher_order_procedure_header
            }
        procedure_return_type = { right_arrow ~ ( higher_order_procedure_header | type_decl ) }
    procedure_def = {
        procedure_header
        ~ brace_open
        ~ procedure_body
        ~ brace_close
        ~ procedure_in?
        ~ procedure_where?
    }
        procedure_body = {
            statement* ~ return_value?
        }
        in_lit = @{ "in" }
        where_lit = @{ "where" }
        procedure_in = {
            in_lit
            ~ brace_open
            ~ statement* ~ return_value?
            ~ brace_close
        }
        procedure_where = {
            where_lit
            ~ brace_open
            ~ statement* ~ return_value?
            ~ brace_close
        }

ident = @{ ASCII_ALPHA_LOWER ~ ( ASCII_ALPHA_LOWER | ASCII_DIGIT | wildcard)* }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE)}

separator = @{ "::" }

/* Type Declaration */
data_type_decl = {
    stability?
    ~ "data"
    ~ type_decl
    ~ "="
    | (pipe ~ variant_constructor) {2,}
    | variant_constructor
}
type_decl = {
    primitive_data_type_decl
    | generic_data_type_decl
    | concrete_data_type_decl
    | collection_decl
}
primitive_data_type_decl = {
    bool_type
    | unit_type
    | molecule_type
    | who_type
    | binary_type
    | hexadecimal_type
    | i64_type
    | i32_type
    | i16_type
    | i8_type
    | f64_type
    | f32_type
    | f16_type
    | f8_type
    | u64_type
    | u32_type
    | u16_type
    | u8_type
    | string_type
    | char_type
}
    bool_type         = @{ "bool" }
    molecule_type     = @{ "mol" }
    unit_type         = @{ paren_open ~ paren_close }
    i64_type          = @{ "i64" }
    i32_type          = @{ "i32" }
    i16_type          = @{ "i16" }
    i8_type           = @{ "i8" }
    u64_type          = @{ "u64" }
    u32_type          = @{ "u32" }
    u16_type          = @{ "u16" }
    u8_type           = @{ "u8" }
    f64_type          = @{ "f64" }
    f32_type          = @{ "f32" }
    f16_type          = @{ "f16" }
    f8_type           = @{ "f8" }
    string_type       = @{ "string" }
    hexadecimal_type  = @{ "hex" }
    binary_type       = @{ "bin" }
    char_type         = @{ "char" }
    who_type          = @{ "who" }
generic_data_type_decl = {
    data_type_name
    ~ angle_open
    ~ type_decl ~ (comma ~ type_decl)*
    ~ angle_close
}
concrete_data_type_decl = {
    data_type_name
}
variant_constructor = {
    stability? ~ ( product_variant_constructor | empty_variant_constructor )
}
data_type_name = @{
    ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)*
}
generic_type_label = { generic_type_name }
generic_type_name = @{
    ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)*
}
product_variant_constructor = {
    variant_constructor_name
    ~ paren_open
    ~ type_decl ~ (comma ~ type_decl)*
    ~ paren_close
}
empty_variant_constructor = {
    variant_constructor_name
}
variant_constructor_name = @{
    ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | ASCII_ALPHA_UPPER)*
}
primitive_collection_decl = {
    primitive_list_type_decl
    | primitive_array_type_decl
    | primitive_tuple_type_decl
}
primitive_list_type_decl   = {
    bracket_open
    ~ primitive_data_type_decl
    ~ bracket_close
}
primitive_array_type_decl  = {
    array_open
    ~ array_length ~ ";"
    ~ primitive_data_type_decl
    ~ array_close
}
primitive_tuple_type_decl  = {
    paren_open
    ~ (primitive_data_type_decl ~ (comma ~ primitive_data_type_decl)*)?
    ~ paren_close
}
collection_decl = {
    record_type_decl
    | list_type_decl
    | array_type_decl
    | tuple_type_decl
}
record_type_decl = {
    brace_open
    ~ (record_pair_decl ~ (comma ~ record_pair_decl)*)
    ~ brace_close
}
    record_pair_decl = { key_type_decl ~ ":" ~ (higher_order_procedure_header | type_decl) }
        key_type_decl  = {
            atom_inst
            | i64_type
            | bool_type
            | string_type
            | char_type
            | data_type_name
        }
list_type_decl   = {
    bracket_open
    ~ type_decl
    ~ bracket_close
}
array_type_decl  = {
    array_open
    ~ array_length ~ ";"
    ~ type_decl
    ~ array_close
}
    array_length = { integer_inst }
tuple_type_decl  = {
    paren_open
    ~ (type_decl ~ (comma ~ type_decl)*)?
    ~ paren_close
}
